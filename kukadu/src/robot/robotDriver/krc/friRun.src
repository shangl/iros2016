&ACCESS RVP
&REL 254
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM EDITMASK = *
DEF friRun( )
;FOLD Initializations
  DECL FriState r
  DECL int i
  DECL int commandId
  DECL Stiffness newStiffness
  DECL E6Axis currentJoints
  DECL E6Pos currentPosition
  DECL E6Axis newJoints
  DECL E6Pos newPosition
  for i = 1 to 16
    $FRI_TO_REA[i] = 0.0
    $FRI_TO_INT[i] = 0
    $FRI_TO_BOOL[i] = false
  endfor
  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    INTERRUPT ON 3 
    BAS (#INITMOV,0 )
  ;ENDFOLD
;ENDFOLD

r = friStop() ; Stop FRI in case it's running
r = friClose()

bas(#TOOL, 1) ; Set tool number
; $TOOL = $NULLFRAME ; Set tool
$BASE = $NULLFRAME ; Set base

; Move to a safe start position
ptp XHOME
; ptp {a1 4.5,a2 92,a3 71,a4 0,a5 -44,a6 1,e1 0}

r = friSetup("192.168.1.10", 49938, 49938)
r = friOpen(20) ; Start FRI
wait for ($FRISTATE == #MON)

while true
  $FRI_TO_BOOL[1] = false ; Reset busy flag
  wait for ($FRI_FRM_INT[1] > 0) ; Wait for a command
  commandId = $FRI_FRM_INT[1];
  $FRI_TO_BOOL[1] = true ; Set busy flag
  wait for ($FRI_FRM_INT[1] == 0) ; Wait for busy flag to be received
  switch commandId ; Process the received command
    case 1
      ;FOLD Demo command mode
      ptp {a1 4.5,a2 92,a3 71,a4 0,a5 -44,a6 1,e1 0} ; Move to safe starting point
      wait for ($FRIQUALITY == #PERFECT)
      r = friStart(1.0)
      wait sec 0.5
      if ($FRISTATE == #CMD) then
        wait for ($FRI_FRM_INT[1] == -1) or ($FRISTATE == #MON); Wait until the remote sends a stop flag or get out of the command mode somehow
        r = friStop()
      endif
      ;ENDFOLD
    case 2
      ;FOLD Move joints
      newJoints.A1 = rad2Deg($FRI_FRM_REA[1])
      newJoints.A2 = rad2Deg($FRI_FRM_REA[2]) + 90 ; Weird Kuka convention, different value for the stretched position on the KRC or in the FRI
      newJoints.E1 = rad2Deg($FRI_FRM_REA[3])
      newJoints.A3 = rad2Deg($FRI_FRM_REA[4])
      newJoints.A4 = rad2Deg($FRI_FRM_REA[5])
      newJoints.A5 = rad2Deg($FRI_FRM_REA[6])
      newJoints.A6 = rad2Deg($FRI_FRM_REA[7])
      ptp newJoints
      wait sec 0.1 ; Ensures that the interpreter does not execute anything else before the movement is completed
      ;ENDFOLD
    case 3
      ;FOLD Move position
      newPosition.X = $FRI_FRM_REA[1] * 1000 ; Convert meters to millimeters
      newPosition.Y = $FRI_FRM_REA[2] * 1000
      newPosition.Z = $FRI_FRM_REA[3] * 1000
      newPosition.A = rad2Deg($FRI_FRM_REA[4])
      newPosition.B = rad2Deg($FRI_FRM_REA[5])
      newPosition.C = rad2Deg($FRI_FRM_REA[6])
      ptp newPosition
      wait sec 0.1
      ;ENDFOLD
    case 5
      ;FOLD Get position
      $FRI_TO_REA[1] = $POS_ACT_MES.X / 1000
      $FRI_TO_REA[2] = $POS_ACT_MES.Y / 1000
      $FRI_TO_REA[3] = $POS_ACT_MES.Z / 1000
      $FRI_TO_REA[4] = deg2Rad($POS_ACT_MES.A)
      $FRI_TO_REA[5] = deg2Rad($POS_ACT_MES.B)
      $FRI_TO_REA[6] = deg2Rad($POS_ACT_MES.C)
      ;ENDFOLD
  endswitch
endwhile

r = friClose();

END

;FOLD rad2Deg(): convert angle from radians to degrees
DEFFCT real rad2Deg(v:in)
  real v
  return (v * 180 / 3.14159265359)
ENDFCT
;ENDFOLD

;FOLD deg2Rad(): convert angle from degrees to radians
DEFFCT real deg2Rad(v:in)
  real v
  return v * (3.141592365359 / 180);
ENDFCT
;ENDFOLD